2011.12.30 Fri.

次にすることは、cabal file の作成。
module は Graphics.X11.Turtle で良いかと思う。
src/Graphics/X11/Turtle.hs に source code を置こう。

この段階で一度 hackage に登録してしまおう。

その次に、turtle instance を複数作れるようにしよう。
これによって readIORef に依存する変数を減らすことができるだろう。
作りとしては、newTurtle :: IO Turtle とでもして、
もしも IORef によって作成した window が undefined だったら window を open する
ことにしよう。

それと、undo 機能を、たとえば 100 くらいまでにすることによって、
speed up を図ろう。
また、python において、関数にまとめられた動作の undo がどういうふうになっているか
調べよう。

2012.01.04 Wed.

thread を利用して、ghci からでも expose event に反応するようにしたい。

2012.01.13 Fri.

infinite list を使って、状態変化を [Turtle] で表現してみたい。
これはもしかすると、GC の問題により、効率が低下する可能性がある。
そのため、test branch において作業することにする。

状態は Turtle で表現すれば良いが状態変化に伴って生じる IO をどう扱えば良いか。
Turtle 中に、draw と redraw を用意しておけば良いのかもしれない。
event は eventPoint を increment するようにする。
そして、同時に draw を実行する。

それとも Turtle の状態から、IO をその都度生成するほうが良いのかもしれない。
Event は Turtle の状態を変化させる。
その Turtle の状態の遷移から、draw や redraw 等の IO を生成するようにする、か。
Turtle の状態遷移を扱う module を TurtleState として、
基本的には Turtle -> Command -> Turtle という関数があれば良いはずだ。
Turtle の描画を扱う module を TurtleDraw として別々に作ったらどうだろうか。
こちらは Turtle -> Turtle -> IO () という関数が基本的な関数となるだろう。
Pixmap による buffer をどこで扱うかという問題もある。
undo を考えなければ Turtle -> Turtle -> IO () 関数は buffer の存在を前提として、
そこのうえに追加していく形をとれば良いだろう。
undo は原始的には直前までの Turtle による描画を buffer に書き込んで、
そのうえで undo のアニメーションを実行すれば良いだろう。

2012.01.17 Tue.

openWorld >>= initTurtle のようにすれば複数の Window のそれぞれに 複数の turtle を
置くことが可能になるだろう。

layer を重ねていく方法を考えなければならない。
これはけっこう難しい。
X Window System の機能として、透明色があれば良いのだが。

となると考え方を変えて、
それぞれの layer への描画を IO () として保存しておき、
それらの IO () を Pixmap 上に順々に描いていくってとこか。
そうすれば layer の重ね合わせが実装できる。
ただし、speed はどうかわからないが。

2012.01.18 Wed.

描画の際には、つまり redraw と adddraw の違いを意識する必要がある。
Pixmap に描画している以上、expose event による redraw は考える必要がないように思う。
undo さえ考えなければ亀が複数いたところで問題はないのではと思われる。
BG と Buf とがあれば良いように思う。
しかし、undo を考えるとなると、亀ごとに BG を持つ必要がある。
となると BG は単純な Pixmap では作れないように思うのだ。

亀ごとに自分の軌跡を保存しておくというやりかたは上手くいくだろうか。
undo の限界点の前までを UndoBuf の Pixmap に書き込んでしまい、
亀ごとの軌跡を消すというやりかたはどうだろうか。
そうなると undo の実装は、まず UndoBuf から BG に copy し、
そのうえでそれぞれの亀ごとの軌跡を flush する。
この場合、undo におけるアニメーションをどう実現したら良いか。
アニメーションは一番上の Buf 上で行えば良いのかもしれない。
そしてアニメーションが終了したところでその軌跡を下の Buf に書き込めば良い。
このやりかたならば、undo のアニメーションにも対応できる。
つまり、いちいち下の Buf から上の Buf に copy しながら
アニメーションを実行すれば良い。

まずは undo を考えないで複数の亀を動かすことを考えてみようかな。

2012.01.19 Thu.

layer から undoBuf に描き込むところで問題が生じた。
layer は Pixmap -> IO () という形かまたは Bool -> IO () という形に
しておかなければならなかったようだ。

2012.01.20 Fri.

次にするべきことは、[State] による undo の実装だろう。
とりあえず、tests/ 下で作る。
戦略としては、line を実行後の State に
 lineDone をマークするというやりかたが良いと思われる。

ふたつの TurtleState を取ってその間のアニメーションを実行する関数を作るべきだろう。
そこには、移動、回転がある。
また、アニメーションを伴わないものとしてペンの上げ下げがある。

亀の移動のアニメーションと背景への描画。
背景の undo と clear の関数を export する module が必要だ。

2012.01.23 Mon.

入力を無限リストとして集める。
その無限リストを [Turtle] に写像する。
その Turtle 列から描画する。

入力は、
Goto Double Double | RotateTo Double | Undo | Shape [(Double, Double)] |
ShapeSize Double
で良いかと思う。
将来的には、Color や線の太さ等を変えられるようにする。

2012.01.28 Sat.

if :: a -> a -> Bool -> a
となるような関数を作り、yjtools に置くことにする。
名前は、selectIf あたりが良いと思う。

2012.02.01 Wed.

Layer を独立した data とする。

あるいは、Layer を個々の操作の列ではなく、
それぞれの時点での全体としての IO の列とすれば上手くいくかもしれない。
しかし、その場合にパフォーマンスがどうなるかがわからない。
もしかすると壊滅的に遅くなるかもしれない。

2012.02.02 Thu.

Layer への IO を TurtleState に入れることにする。
undo buffer が必要かもしれない。

2012.02.20 Mon.

xturtle と yjsvg で採用している座標系が違う。
それを合わせるかまたは変換する必要がある。
しかし、

2012.02.24 Fri.

Field を X11 と Layers とに分けようと思う。
Layers の方はもっと抽象化できるはずだ。
つまり、Layer を重ねた上に Character を重ねていくということは、
単純に IO だけの話にできる。
つまり X 固有の話にする必要がない。

2つの buffer がある。
undoBuf と bg だ。

addLayer, addCharacter, addLayerAction, setCharacter,
undoLayer
といったところだ。

addLayerAction --> redrawCharacter
setCharacter --> redrawCharacter

Layers :: [[(IO (), IO ())]]
Characters :: [IO ()]
